

2 서버로직

        var http = require('http');
        var server = http.createServer();

        var host = Lip;
        var port = 9888;
        server.listen(port, host,function(){
            console.log('서버 시작');
        });

        server.on('connection',function(socket){//클라이언트 정보를 socket이 갖고있다.
            //var addr = socket.address();
            console.log('클라이언트가 접속',
                        socket.remoteAddress+','
                        +socket.remotePort);
            //socket.remoteAddress 어디서 들어왔는지 정보
            //socket.remotePort    어디서 들어왔는지 소켓의 포트번호 정보
            //외부와 통신이 되지 않을때 방화벽을 확인한다.
        });



	     server.on('request',function(req,res){
	
	            switch (req.url){
	                case "/upload" :
	                    fn_upload(req, res);
	                    break;       
	    
	                    
	                default :
	                    //
	                    res.end();
	            }
	
	
	     });



	      server.on('close',function(){
	     console.log('서버종료');
	
	      });



// 업로드 펑션 로직 

function upload(req, res){

        //npm install formidable <-- 인스톨 해야함
        const formidable = require('formidable');
        const form = formidable({ multiples: true });
        
        //1. form file reading 시작 
        form.on('fileBegin', (formname, file) => {
            debugger;
            form.emit('data', { name: 'file', formname, value: file });

        });

        //2. file data event 설정 <-- 반드시 존재해야함 
        form.on('data', ({ name, key, value, buffer, start, end, formname}) => {
            debugger;

        });

        //3 상위로직이 처리된 이후 -> tmp 파일을 저장처리 이후 아래 로직 callback 됨 
        form.parse(req, (err, fields, files) => {
            if (err) {
              res.end(JSON.stringify({"RETCD":"E"},{"MESTXT": String(err)}));
              return;
            }

            //tmp 파일이 저장되잇는 경로 
            var Ltmp_path = files.files.filepath;       
            //클라이언트(화면에서) 전송한 파일명 
            var LorigFnam = files.files.originalFilename;
            //상위 임시 경로에 파일 읽기 
            oAPP.fs.readFile(Ltmp_path, (error, data) => {
                if(error) {
                    res.end(JSON.stringify({"RETCD":"E"},{"MESTXT": "tmp 파일을 읽기 실패"}));
                    throw error;
                }
            
                //저장 위치 경로 설정 
                var Lsave_path = "D:\\DATA\\" + LorigFnam;
                
                //파일 저장 
                oAPP.fs.writeFile(Lsave_path, data, function (err) {
                    if (err){ res.end(JSON.stringify({"RETCD":"E"},{"MESTXT": "저장처리시 오류발생"})); return }
                    //임시tmp 경로 파일 삭제 
                    try { oAPP.fs.unlinkSync(Ltmp_path); } catch(err) {}
                    res.end(JSON.stringify({"RETCD":"S"})); //클라이언트로 정상코드 전송 
                   
                });
            });
         
        });

}   